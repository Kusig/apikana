#!/usr/bin/env node
var path = require('path');
var fs = require('fs');
var colors = require('ansi-colors');
var params = require('../src/params');
var compareVersions = require('compare-versions');
var packge = require('../package.json');
var argc = process.argv.length;

require('../src/logo');
if (argc === 2) {
    help();
} else {
    if (params.minVersion() && compareVersions(params.minVersion(), packge.version) > 0) {
        console.log(colors.red('Expected minimum version'), params.minVersion(), colors.red('but current version is'), packge.version);
        console.log(colors.red('Please update the global apikana installation:'), 'npm install -g apikana');
        process.exit(1);
    }
    switch (process.argv[2]) {
    case 'init':
        require('../src/init/init');
        break;
    case 'start':
        generate();
        break;
    case 'stop':
        require('../src/server/stop').stop(params.port(), function () {
            console.log('Stopped');
        });
        break;
    default:
        help();
        break;
    }
}

function help() {
    console.log(colors.magenta('apikana help'), '                             Show this help.');
    console.log(colors.magenta('apikana init'), '                             Initialize a new API project.');
    console.log(colors.magenta('apikana start'), colors.blue('[source]'), colors.red('[options]'), 'Generate JSON schemas and HTML documentation from the API.');
    console.log(colors.blue('               source'), '                    Directory containing the APIs and models. Default: src');
    console.log(colors.red('             --api=<file>'), '                The main api file (yaml or json). Default: openapi/api.yaml');
    console.log(colors.red('             --models=<path>'), '             The directory containing the models, if no api file is given. Default: ts');
    console.log(colors.red('             --style=<path>'), '              The directory containing css files for the swagger GUI. Default: style');
    console.log(colors.red('             --config=<file>'), '             Read additional options from a file in JSON format.');
    console.log(colors.red('             --javaPackage=<name>'), '        Java package to use.');
    console.log(colors.red('             --deploy=<boolean>'), '          If the sources should be copied into the target directory. Default: false');
    console.log(colors.red('             --dependencyPath=<path>'), '     Directory containing API dependencies. Default: node_modules/$api-dependencies');
    console.log(colors.red('             --port=<number>'), '             Port to serve the HTML documentation. Default: 8333');
    console.log(colors.red('             --serve=<boolean>'), '           If the HTML documentation should be served over HTTP. Default: true');
    console.log(colors.red('             --openBrowser=<boolean>'), '     If the browser should be opened at first start. Default: true');
    console.log(colors.red('             --minVersion=<version>'), '      Fail if the current apikana version is lower than expected.');
    console.log(colors.magenta('apikana stop '), colors.red('[options]'), '                  Stop a running server.');
    console.log(colors.red('             --port=<number>'), '             Port of the server to be stopped. Default: 8333');
}

function generate() {
    var source = 'src';

    if (argc > 3 && process.argv[3].substring(0, 2) !== '--') {
        source = process.argv[3];
    }
    params.readConfigFile();

    console.log('Source: ', source);

    require('../src/generate').generate(path.resolve(source), params.target());
}